<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
  <display-name>Archetype Created Web Application</display-name>

  <!-- 配置加载类路径的配置文件 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:/spring/applicationContext.xml</param-value>
  </context-param>

  <!-- 配置监听器 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>
  <listener>
    <listener-class>com.vcl.utils.SystemLoaderListener</listener-class>
  </listener>

  <!-- 解决中文乱码过滤器 -->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--使用Spring MVC,配置DispatcherServlet是第一步。DispatcherServlet是一个Servlet,,所以可以配置多个DispatcherServlet-->
  <!--DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据某某规则分发到目标Controller(我们写的Action)来处理。-->
  <!--配置SpringMVC DispatcherServlet-->
  <servlet>
    <!--在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean。-->
    <servlet-name>springMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <!--指明了配置文件的文件名，不使用默认配置文件名，而使用spring-mvc.xml配置文件。-->
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:/spring/spring-mvc.xml</param-value>
    </init-param>

    <!--是启动顺序，让这个Servlet随Servlet容器一起启动。-->
    <load-on-startup>1</load-on-startup>
    <async-supported>true</async-supported>

  </servlet>
  <servlet-mapping>
    <!--这个Servlet的名字是dispatcher，可以有多个DispatcherServlet，是通过名字来区分的。每一个DispatcherServlet有自己的WebApplicationContext上下文对象。同时保存的ServletContext中和Request对象中.-->
    <!--ApplicationContext是Spring的核心，Context我们通常解释为上下文环境，我想用“容器”来表述它更容易理解一些，ApplicationContext则是“应用的容器”了，Spring把Bean放在这个容器中，在需要的时候，用getBean方法取出-->
    <servlet-name>springMVC</servlet-name>
    <!--Servlet拦截匹配规则可以自已定义，当映射为@RequestMapping("/user/add")时，为例,拦截哪种URL合适？-->
    <!--1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。-->
    <!--2、拦截/，例如：/user/add,可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。 -->
    <url-pattern>/</url-pattern><!--会拦截URL中带“/”的请求。-->
  </servlet-mapping>


  <!--&lt;!&ndash; 前端控制器（加载classpath:spring-mvc.xml 服务器启动创建servlet） &ndash;&gt;-->
  <!--<servlet>-->
    <!--<servlet-name>dispatcherServlet</servlet-name>-->
    <!--<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>-->
    <!--&lt;!&ndash; 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 &ndash;&gt;-->
    <!--<init-param>-->
      <!--<param-name>contextConfigLocation</param-name>-->
      <!--<param-value>classpath:/spring/spring-mvc.xml</param-value>-->
    <!--</init-param>-->
    <!--&lt;!&ndash; 服务器启动的时候，让DispatcherServlet对象创建 &ndash;&gt;-->
    <!--<load-on-startup>1</load-on-startup>-->
  <!--</servlet>-->

  <!--<servlet-mapping>-->
    <!--<servlet-name>dispatcherServlet</servlet-name>-->
    <!--<url-pattern>/</url-pattern>-->
  <!--</servlet-mapping>-->
  <!--<servlet-mapping>-->
    <!--<servlet-name> default</servlet-name>-->
    <!--<url-pattern>/css/**</url-pattern>-->
    <!--<url-pattern>/js/**</url-pattern>-->
    <!--<url-pattern>/fints/**</url-pattern>-->
    <!--<url-pattern>/resources/images/**</url-pattern>-->
    <!--<url-pattern>/resources/layuiadmin/**</url-pattern>-->
  <!--</servlet-mapping>-->
  <welcome-file-list>
    <welcome-file>/view/index.jsp</welcome-file>
  </welcome-file-list>
</web-app>
